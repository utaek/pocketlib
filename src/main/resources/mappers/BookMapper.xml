<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
     "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="BookMapper">

	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
	<resultMap id="bookMap"
		type="pocketLib.spring.pocketLibSpring.mybatis.model.Book">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="isbn" column="isbn" />
		<result property="title" column="title" />
		<result property="author" column="author" />
		<result property="description" column="description" />
		<result property="pubDate" column="pubDate" />
		<result property="priceSales" column="priceSales" />
		<result property="priceStandard" column="priceStandard" />
		<result property="cover" column="cover" />
		<result property="categoryId" column="categoryId" />
		<result property="categoryName" column="categoryName" />
		<result property="publisher" column="publisher" />
		<result property="customerReviewRank"
			column="customerReviewRank" />
		<result property="cate" column="cate" />
		<result property="count" column="count" />



	</resultMap>
	<resultMap id="SearchingMap"
		type="pocketLib.spring.pocketLibSpring.mybatis.model.Searching">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="queryid" column="queryid" />
		<result property="queryValue" column="queryvalue" />
		<result property="querycnt" column="querycnt" />

	</resultMap>

	<resultMap id="BookSearchingMap"
		type="pocketLib.spring.pocketLibSpring.mybatis.model.Searching">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="bookSearchingId" column="booksearchingid" />
		<result property="isbn" column="isbn" />
		<result property="queryid" column="queryid" />

	</resultMap>

	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
	<resultMap id="BookReadMap"
		type="pocketLib.spring.pocketLibSpring.mybatis.model.BookRead">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="bRNo" column="bRNo" />
		<result property="userno" column="userno" />
		<result property="isbn" column="isbn" />
		<result property="value" column="value" />
		<result property="reg_date" column="reg_date" />
		<result property="count" column="count" />
		<result property="term" column="term" />

	</resultMap>

	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
	<resultMap id="BookInterestedMap"
		type="pocketLib.spring.pocketLibSpring.mybatis.model.BookInterested">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="bINo" column="bINo" />
		<result property="userno" column="userno" />
		<result property="isbn" column="isbn" />
		<result property="reg_date" column="reg_date" />
	</resultMap>


	<!-- 단일행 조회를 위한 기능 정의 -->
	<select id="selectItem"
		parameterType="pocketLib.spring.pocketLibSpring.mybatis.model.Book"
		resultMap="bookMap">
		<!-- "#{변수명}" 으로 표시된 곳에 멤버변수가 치환된다. -->
		select isbn, title, author, description, pubDate, priceSales,
		priceStandard, cover, categoryId, categoryName, publisher,
		customerReviewRank from book where isbn=#{isbn};

	</select>



	<!-- 다중행 조회를 위한 기능 정의 -->
	<select id="selectList"
		parameterType="pocketLib.spring.pocketLibSpring.mybatis.model.Book"
		resultMap="bookMap">
		<!-- 이 안에서 처리할 SQL문을 명시한다. -->

		select isbn, title, author, description, pubDate, priceSales,
		priceStandard, cover, categoryId, categoryName,
		publisher,customerReviewRank from book;


	</select>


	<!-- 유저의 관심책 목록받기 -->

	<select id="InterestedList"
		parameterType="pocketLib.spring.pocketLibSpring.mybatis.model.Book"
		resultMap="bookMap">
		<!-- 이 안에서 처리할 SQL문을 명시한다. -->

		select b.isbn, title, cover from book as b join bookinterested as i
		where b.isbn=i.isbn and userno=#{userno}
		order by reg_date desc;

	</select>


	<!-- 유저의 읽은책 목록받기 -->
	<select id="ReadList"
		parameterType="pocketLib.spring.pocketLibSpring.mybatis.model.Book"
		resultMap="bookMap">
		<!-- 이 안에서 처리할 SQL문을 명시한다. -->

		select book.isbn, title, cover, bookread.value, bookread.reg_date from
		book join bookread where book.isbn = bookread.isbn and
		userno=#{userno}
		order by reg_date desc;

	</select>

	<!-- 유저의 읽은 책 목록 조회 -->
	<select id="selectItembyUserNo"
		parameterType="pocketLib.spring.pocketLibSpring.mybatis.model.BookRead"
		resultMap="bookMap">
		<!-- "#{변수명}" 으로 표시된 곳에 멤버변수가 치환된다. -->
		select book.isbn, book.title, book.cover from
		book join bookread where
		book.isbn = bookread.isbn and
		userno=#{userno};

	</select>


	<!-- 데이터 수 조회를 위한 기능 정의 -->
	<select id="selectCount"
		parameterType="pocketLib.spring.pocketLibSpring.mybatis.model.Book"
		resultType="int">
		<!-- 이 안에서 처리할 SQL문을 명시한다. -->
		select count(*) from book;

	</select>


	<!-- isbn 없으면 insert 하기 -->
	<insert id="insertItem"
		parameterType="pocketLib.spring.pocketLibSpring.mybatis.model.Book">
		<!-- "#{변수명}" 으로 표시된 곳에 Beans의 멤버변수가 치환된다. -->
		insert into book (
		isbn,
		title,
		author,
		description,
		pubDate,
		priceSales,
		priceStandard,
		cover,
		categoryId,
		categoryName,
		publisher,
		customerReviewRank)
		values (
		#{isbn},
		#{title},
		#{author},
		#{description},
		#{pubDate},
		#{priceSales},
		#{priceStandard},
		#{cover},
		#{categoryId},
		#{categoryName},
		#{publisher},
		#{customerReviewRank})
		on duplicate key
		update
		customerReviewRank=#{customerReviewRank};
	</insert>


	<!-- 데이터 삭제를 위한 기능 정의 -->
	<delete id="deleteItem"
		parameterType="pocketLib.spring.pocketLibSpring.mybatis.model.Book">
		<!-- 이 안에서 처리할 SQL문을 명시한다. -->
		delete from book where isbn=#{isbn} ;
	</delete>

	<select id="selectBookSearchingList"
		parameterType="pocketLib.spring.pocketLibSpring.mybatis.model.Book"
		resultMap="bookMap">
		<!-- "#{변수명}" 으로 표시된 곳에 멤버변수가 치환된다. -->
		SELECT DISTINCT
		book.isbn,
		book.title,
		book.author,
		book.description,
		book.pubDate,
		book.publisher,
		book.priceSales,
		book.priceStandard,
		book.cover,
		book.categoryId,
		book.categoryName,
		book.customerReviewRank
		FROM
		book
		INNER JOIN book_searching ON book_searching.isbn = book.isbn
		INNER JOIN searching ON book_searching.queryId = searching.queryId
		WHERE
		searching.queryvalue = #{queryValue};

	</select>

	<!-- 유저가 읽은 책의 categoryName (depth 1 번째의 카테고리 네임) 가져오기 -->
	<select id="bookReadCate"
		parameterType="pocketLib.spring.pocketLibSpring.mybatis.model.Book"
		resultMap="bookMap">
		<!-- 이 안에서 처리할 SQL문을 명시한다. -->

		SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(book.categoryName, '>' , 2),
		'>', -1) as cate,
		count(*) as count
		from book
		inner join bookread
		on
		book.isbn=bookread.isbn
		where bookread.userno=#{userno} and
		SUBSTRING_INDEX(SUBSTRING_INDEX(book.categoryName, '>' , 2), '>', -1)
		in ('경제경영','과학','사회과학','소설/시/희곡','에세이','역사' ,'인문학','자기계발')
		group by
		cate;
	</select>

	<!-- 유저가 등록한 관심책의 총 정가 -->
	<select id="totalPriceofBookInterested"
		parameterType="pocketLib.spring.pocketLibSpring.mybatis.model.Book"
		resultMap="bookMap">

		select sum(priceStandard) as priceStandard from book
		join
		bookinterested
		on book.isbn=bookinterested.isbn
		where userno=#{userno};
	</select>

	<!-- 유저가 등록한 읽은책의 총 정가 -->
	<select id="totalPriceofBookRead"
		parameterType="pocketLib.spring.pocketLibSpring.mybatis.model.Book"
		resultMap="bookMap">

		select sum(priceStandard) as priceStandard from book
		join
		bookread
		on book.isbn=bookread.isbn
		where userno=#{userno};

	</select>
</mapper>